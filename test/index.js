// Generated by CoffeeScript 1.7.1
(function() {
  var app, db, expect, person, request, urlencode;

  request = require("supertest");

  expect = require("chai").expect;

  urlencode = require("urlencode");

  app = void 0;

  db = void 0;

  person = void 0;

  describe("#people", function() {
    before(function() {
      db = require("level-test")()("testdb");
      app = require("../")(db);
    });
    it("should POST /people", function(done) {
      person = {
        "@id": "http://dinosaur.is#i",
        name: "Michael Williams"
      };
      return request(app).post("/people").send(person).expect("Content-Type", /json/).expect(201).expect(function(req) {
        var body, prop;
        body = req.body;
        expect(body).to.have.property("@type", "foaf:Person");
        for (prop in body) {
          expect(body).to.have.property(prop, body[prop]);
        }
      }).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
    it("should GET /people", function(done) {
      return request(app).get("/people").expect("Content-Type", /json/).expect(200).expect(function(req) {
        var body, prop;
        body = req.body;
        expect(body).to.have.length(1);
        for (prop in body[0]) {
          expect(body[0]).to.have.property(prop, body[0][prop]);
        }
      }).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
    it("should GET /people/:id", function(done) {
      return request(app).get("/people/" + urlencode(person["@id"])).expect("Content-Type", /json/).expect(200).expect(function(req) {
        var body, prop;
        body = req.body;
        expect(body).to.have.property("@type", "foaf:Person");
        for (prop in body) {
          expect(body).to.have.property(prop, body[prop]);
        }
      }).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
    it("should PUT /people/:id", function(done) {
      person["name"] = "Mikey Williams";
      return request(app).put("/people/" + urlencode(person["@id"])).send(person).expect("Content-Type", /json/).expect(200).expect(function(req) {
        var body, prop;
        body = req.body;
        expect(body).to.have.property("@type", "foaf:Person");
        for (prop in body) {
          expect(body).to.have.property(prop, body[prop]);
        }
      }).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
    it("should DELETE /people/:id", function(done) {
      return request(app).del("/people/" + urlencode(person["@id"])).expect(204).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
    return it("should not GET deleted id", function(done) {
      return request(app).get("/people/" + urlencode(person["@id"])).expect("Content-Type", /json/).expect(404).end(function(err, res) {
        if (err) {
          return done(err);
        }
        return done();
      });
    });
  });

}).call(this);
