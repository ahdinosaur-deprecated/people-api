// Generated by CoffeeScript 1.7.1
(function() {
  var alias, context, hasType, jsonld, levelgraph, levelgraphJsonld, service, _;

  levelgraph = require('levelgraph');

  levelgraphJsonld = require('levelgraph-jsonld');

  jsonld = require('jsonld');

  _ = require('lodash');

  context = require('./context');

  alias = require('./utils/alias');

  hasType = require('./utils/hasType');

  module.exports = service = function(db) {
    db = levelgraphJsonld(levelgraph(db));
    return {
      find: function(params, callback) {
        return db.search({
          subject: db.v("@id"),
          predicate: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
          object: "foaf:Person"
        }, function(err, people) {
          if (err) {
            return callback(err);
          }
          return callback(null, people);
        });
      },
      get: function(id, params, callback) {
        return db.jsonld.get(id, context, function(err, person) {
          if (err) {
            return callback(err);
          }
          if (!person) {
            err = new Error("could not find id " + id);
            err.status = 404;
            return callback(err);
          }
          return callback(null, person);
        });
      },
      create: function(data, params, callback) {
        data = alias(data, "type", "@type");
        data = hasType(data, "foaf:Person");
        data = alias(data, "id", "@id");
        return db.jsonld.put(data, function(err, person) {
          if (err) {
            return callback(err);
          }
          return jsonld.compact(person, context, callback);
        });
      },
      update: function(id, data, params, callback) {
        var err;
        data = alias(data, "type", "@type");
        data = hasType(data, "foaf:Person");
        data = alias(data, "id", "@id");
        if (data["@id"] !== id) {
          err = new Error("id in route does not match id in data");
          err.status = 400;
          return callback(err);
        }
        return db.jsonld.put(data, function(err, person) {
          if (err) {
            return callback(err);
          }
          return jsonld.compact(person, context, callback);
        });
      },
      patch: function(id, data, params, callback) {
        var err, newPerson;
        data = alias(data, "type", "@type");
        data = hasType(data, "foaf:Person");
        data = alias(data, "id", "@id");
        if (data["@id"] !== id) {
          err = new Error("id in route does not match id in data");
          err.status = 400;
          return callback(err);
        }
        db.jsonld.get(id, context, function(err, oldPerson) {
          if (err) {
            return callback(err);
          }
        });
        if (!person) {
          err = new Error("could not find @id " + id);
          err.status = 404;
          return callback(err);
        }
        newPerson = _.extend(oldPerson, data);
        return db.jsonld.put(newPerson, function(err, person) {
          if (err) {
            return callback(err);
          }
          return jsonld.compact(person, context, callback);
        });
      },
      remove: function(id, params, callback) {
        return db.jsonld.del(id, function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null);
        });
      }
    };
  };

}).call(this);
